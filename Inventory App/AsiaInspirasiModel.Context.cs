//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory_App
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class asiainspEntities : DbContext
    {
        public asiainspEntities()
            : base("name=asiainspEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Additional> Additionals { get; set; }
        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Finishing> Finishings { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Shape> Shapes { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<TestArticle> TestArticles { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<vw_articles> vw_articles { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
    
        public virtual int sp_create_testArticle(string articleID, string materialNaam)
        {
            var articleIDParameter = articleID != null ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(string));
    
            var materialNaamParameter = materialNaam != null ?
                new ObjectParameter("MaterialNaam", materialNaam) :
                new ObjectParameter("MaterialNaam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_create_testArticle", articleIDParameter, materialNaamParameter);
        }
    
        public virtual int sp_insert_articles(string iD, string supplierCode, string typeName, string materialName, string sizeName, string finishingName, string additionalName, string shapeName, string description, Nullable<double> sizeL, Nullable<double> sizeW, Nullable<double> sizeD, Nullable<double> boxSizeL, Nullable<double> boxSizeW, Nullable<double> boxSizeD, Nullable<double> grossWeight, Nullable<double> netWeight, Nullable<decimal> priceSales, Nullable<decimal> priceSupplier, string currency)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var materialNameParameter = materialName != null ?
                new ObjectParameter("MaterialName", materialName) :
                new ObjectParameter("MaterialName", typeof(string));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var finishingNameParameter = finishingName != null ?
                new ObjectParameter("FinishingName", finishingName) :
                new ObjectParameter("FinishingName", typeof(string));
    
            var additionalNameParameter = additionalName != null ?
                new ObjectParameter("AdditionalName", additionalName) :
                new ObjectParameter("AdditionalName", typeof(string));
    
            var shapeNameParameter = shapeName != null ?
                new ObjectParameter("ShapeName", shapeName) :
                new ObjectParameter("ShapeName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var sizeLParameter = sizeL.HasValue ?
                new ObjectParameter("SizeL", sizeL) :
                new ObjectParameter("SizeL", typeof(double));
    
            var sizeWParameter = sizeW.HasValue ?
                new ObjectParameter("SizeW", sizeW) :
                new ObjectParameter("SizeW", typeof(double));
    
            var sizeDParameter = sizeD.HasValue ?
                new ObjectParameter("SizeD", sizeD) :
                new ObjectParameter("SizeD", typeof(double));
    
            var boxSizeLParameter = boxSizeL.HasValue ?
                new ObjectParameter("BoxSizeL", boxSizeL) :
                new ObjectParameter("BoxSizeL", typeof(double));
    
            var boxSizeWParameter = boxSizeW.HasValue ?
                new ObjectParameter("BoxSizeW", boxSizeW) :
                new ObjectParameter("BoxSizeW", typeof(double));
    
            var boxSizeDParameter = boxSizeD.HasValue ?
                new ObjectParameter("BoxSizeD", boxSizeD) :
                new ObjectParameter("BoxSizeD", typeof(double));
    
            var grossWeightParameter = grossWeight.HasValue ?
                new ObjectParameter("GrossWeight", grossWeight) :
                new ObjectParameter("GrossWeight", typeof(double));
    
            var netWeightParameter = netWeight.HasValue ?
                new ObjectParameter("NetWeight", netWeight) :
                new ObjectParameter("NetWeight", typeof(double));
    
            var priceSalesParameter = priceSales.HasValue ?
                new ObjectParameter("PriceSales", priceSales) :
                new ObjectParameter("PriceSales", typeof(decimal));
    
            var priceSupplierParameter = priceSupplier.HasValue ?
                new ObjectParameter("PriceSupplier", priceSupplier) :
                new ObjectParameter("PriceSupplier", typeof(decimal));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_articles", iDParameter, supplierCodeParameter, typeNameParameter, materialNameParameter, sizeNameParameter, finishingNameParameter, additionalNameParameter, shapeNameParameter, descriptionParameter, sizeLParameter, sizeWParameter, sizeDParameter, boxSizeLParameter, boxSizeWParameter, boxSizeDParameter, grossWeightParameter, netWeightParameter, priceSalesParameter, priceSupplierParameter, currencyParameter);
        }
    }
}
